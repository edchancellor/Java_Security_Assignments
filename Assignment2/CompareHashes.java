import java.security.*;
import java.io.*;
import java.util.Random;

public class CompareHashes {

    private static int randomLength = 0; // for the length of the random bytes generated

    public static void main(String[] args) {

        String digestAlgorithm = "SHA-256";
        String textEncoding = "UTF-8";
        byte[] randomBytes; // for storing the random bytes generated
        Random rand = new Random(); // a pseudo-random number generator

        // Check we have 3 arguments
        if (args.length != 2)
        { 
            System.out.println("Usage: 2 arguments required: SampleDigest <inputFile> <randomLength>");
            System.exit(1);
        }

        // Try to read the input String from the provided file
        String inputfile = args[0];
        String inputText = "";
        InputStream inputfilestream = null;
        try
        {          
            inputfilestream = new FileInputStream(inputfile);
        }
        catch(IOException e2)
        {
            System.out.println("IO exception occurred when setting up input file: " + inputfile);
            System.exit(1);
        }
        try
        {    
            int readable_data;
            while ((readable_data = inputfilestream.read()) != -1)
            {
                inputText = inputText + (char)readable_data;
            }
            inputfilestream.close();
        }
        catch(IOException e3)
        {
            System.out.println("IO exception occurred when reading from input file: " + inputfile);
            System.exit(1);
        }

        // Try to parse the length of the random Strings to be generated
        try
        {
            randomLength = Integer.parseInt(args[1]);
        }
        catch(NumberFormatException e1)
        {
            System.out.println("Number format exception occurred. Make sure the string randomLength can be parsed as an int.");
            System.exit(1);
        }

        if(randomLength <= 0)
        {
            System.out.println("Input randomLength must be greater than 0.");
            System.exit(1);
        }

        randomBytes = new byte[randomLength];

        // Testing the hashes of randomly generated byte arrays
        try {
            // Determine the hash of the inputText
            System.out.println("P: " + inputText);
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);

            byte[] inputBytes = inputText.getBytes(textEncoding);
            md.update(inputBytes);
            byte[] digest = md.digest();

            printDigest(inputText, md.getAlgorithm(), digest);

            // Start search for a random String which produces the same hash
            System.out.println("Searching for plaintext Q such that h(P) == h(Q)...");

            int count = 1; // For counting how many attempts we make
            rand.nextBytes(randomBytes);
            md.update(randomBytes);
            byte[] digest2 = md.digest();

            // While we have not found an appropriate random string, keep checking
            while((digest2[0] == digest[0] & digest2[1] == digest[1] & digest2[2] == digest[2]) != true)
            {
                count ++;
                rand.nextBytes(randomBytes);
                md.update(randomBytes);
                digest2 = md.digest();
            }

            // We have found a String, end search
            System.out.println("Found Q! Count was: " + count);
            String Q = new String(randomBytes);
            printDigest(Q, md.getAlgorithm(), digest2);

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Algorithm \"" + digestAlgorithm  + "\" is not available");
        } catch (Exception e) {
            System.out.println("Exception "+e);
        }
    }

    // Helper function for printing the hashes
    public static void printDigest(String inputText, String algorithm, byte[] digest) {
        System.out.println("Digest for the message \"" + inputText +"\", using " + algorithm + " is:");
        for (int i=0; i<digest.length; i++)
            System.out.format("%02x", digest[i]&0xff);
        System.out.println();
    }

}
